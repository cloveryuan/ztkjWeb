/*! https://github.com/lzxb/flex.css */
/*
    定义flex布局
*/
.flex-app (@box,@flex, @flex-box) {
  //^
  .defaultOverflow (@defaultValue:hidden) {
    overflow: @defaultValue;
    & > * {
      overflow: @defaultValue;
    }
    & > [@{flex}] {
      overflow: @defaultValue;
    }
  }
  [@{box}~="fit"] {
    width: 100%;
    height: 100%;
  }
  [@{box}~="fith"] {
    height: 100%;
  }
  [@{box}~="fitw"] {
    width: 100%;
  }
  [@{box}~="scroll"] {
    overflow: auto !important;
    //& > *:first-child {
    & > * {
      overflow: auto !important;
    }
  }
  [@{box}~="scrollx"] {
    overflow-x: auto !important;
    overflow-y: hidden !important;
    //& > *:first-child {
    & > * {
      overflow-x: auto !important;
      overflow-y: hidden !important;
    }
  }
  [@{box}~="scrolly"] {
    overflow-x: hidden !important;
    overflow-y: auto !important;
    //& > *:first-child {
    & > * {
      overflow-x: hidden !important;
      overflow-y: auto !important;
    }
  }
  //$
  [@{flex}] {
    display: flex;
    & > * {
      display: block;
    }
    & > [@{flex}] {
      display: flex;
    }
    .defaultOverflow();
  }
  //^
  [@{flex}~="wrap"] {
    flex-wrap: wrap;
  }
  [@{flex}~="reverse"] {
    flex-wrap: wrap-reverse;
  }
  [@{flex}~="flex"] {
    //flex-grow: 1;
    //flex-shrink: 1;
    //flex-basis: auto;
    flex: 1 1 auto;
  }
  [@{flex}~="center"] {
    justify-content: center;
    align-items: center;
  }
  [@{flex}~="align:top"] {
    align-content: flex-start;
  }
  [@{flex}~="align:bottom"] {
    align-content: flex-end;
  }
  [@{flex}~="align:center"] {
    align-content: center;
  }
  [@{flex}~="align:stretch"] {
    align-content: stretch;
  }
  [@{flex}~="align:justify"] {
    align-content: space-between;
  }
  [@{flex}~="align:around"] {
    align-content: space-around;
  }
  [@{flex}~="box:start"] {
    align-self: flex-start;
  }
  [@{flex}~="box:end"] {
    align-self: flex-end;
  }
  [@{flex}~="box:center"] {
    align-self: center;
  }
  [@{flex}~="box:baseline"] {
    align-self: baseline;
  }
  [@{flex}~="box:stretch"] {
    align-self: stretch;
  }
  //$

  /*
      主轴方向：从左到右(默认)
  */
  [@{flex}~="dir:left"] {
    flex-direction: row;
  }

  /*
      主轴方向：从右到左
  */
  [@{flex}~="dir:right"] {
    flex-direction: row-reverse;
    -webkit-box-pack: end; //修复旧版本主轴和标准主轴flex表现不一致的bug
  }

  /*
      主轴方向：从上到下
  */

  [@{flex}~="dir:top"] {
    flex-direction: column;
  }

  /*
      主轴方向：从下到上
  */

  [@{flex}~="dir:bottom"] {
    flex-direction: column-reverse;
    -webkit-box-pack: end; //修复旧版本主轴和标准主轴flex表现不一致的bug
  }

  /*
      主轴对齐方式：从左到右(默认)
  */

  [@{flex}~="main:left"] {
    justify-content: flex-start;
  }

  /*
      主轴对齐方式：从右到左
  */

  [@{flex}~="main:right"] {
    justify-content: flex-end;
  }

  /*
      主轴对齐方式：两端对齐
  */

  [@{flex}~="main:justify"] {
    justify-content: space-between;
  }
  [@{flex}~="main:around"] {
    justify-content: space-around;
  }

  /*
      主轴对齐方式：居中对齐
  */

  [@{flex}~="main:center"] {
    justify-content: center;
  }
  /*
      交叉轴齐方式：从上到下(默认)
  */

  [@{flex}~="cross:top"] {
    align-items: flex-start;
  }

  /*
      交叉轴齐方式：从下到上
  */

  [@{flex}~="cross:bottom"] {
    align-items: flex-end;
  }

  /*
      交叉轴齐方式：居中对齐
  */

  [@{flex}~="cross:center"] {
    align-items: center;
  }

  /*
      交叉轴齐方式：跟随内容高度对齐
  */

  [@{flex}~="cross:baseline"] {
    align-items: baseline;
  }

  /*
      交叉轴齐方式：高度并排铺满
  */

  [@{flex}~="cross:stretch"] {
    align-items: stretch;
  }

  /*
      子元素平分宽度
  */
  [@{flex}~="box:mean"] > *, //所有元素
  [@{flex}~="box:first"] > *, //第一个子元素
  [@{flex}~="box:last"] > *, //最后一个子元素
  [@{flex}~="box:justify"] > * //两端第一个子元素
  {
    width: 0%;
    height: auto;
    flex-grow: 1;
    flex-shrink: 1;
    //flex-basis: auto;
    //flex: 1 1 auto;
  }

  [@{flex}~="box:first"] > *:first-child, //第一个子元素
  [@{flex}~="box:last"] > *:last-child, //最后一个子元素
  [@{flex}~="box:justify"] > *:first-child, //两端第一个子元素
  [@{flex}~="box:justify"] > *:last-child //两端最后一个子元素
  {
    width: auto;
    flex-grow: 0;
    flex-shrink: 0;
    //flex-basis: auto;
    //flex: 0 0 auto;
  }
  /*
      子元素平分高度
  */
  [@{flex}~="dir:top"][@{flex}~="box:mean"] > *,
  [@{flex}~="dir:top"][@{flex}~="box:first"] > *, //第一个子元素
  [@{flex}~="dir:top"][@{flex}~="box:last"] > *, //最后一个子元素
  [@{flex}~="dir:top"][@{flex}~="box:justify"] > *, //两端最后一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:mean"] > *,
  [@{flex}~="dir:bottom"][@{flex}~="box:first"] > *, //第一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:last"] > *, //最后一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:justify"] > * //两端最后一个子元素
  {
    width: auto;
    height: 0;
    flex-grow: 1;
    flex-shrink: 1;
    //flex-basis: auto;
    //flex: 1 1 auto;
  }
  [@{flex}~="dir:top"][@{flex}~="box:first"] > *:first-child, //第一个子元素
  [@{flex}~="dir:top"][@{flex}~="box:last"] > *:last-child, //最后一个子元素
  [@{flex}~="dir:top"][@{flex}~="box:justify"] > *:first-child, //两端第一一个子元素
  [@{flex}~="dir:top"][@{flex}~="box:justify"] > *:last-child, //两端最后一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:first"] > *:first-child, //第一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:last"] > *:last-child, //最后一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:justify"] > *:first-child //两端第一一个子元素
  [@{flex}~="dir:bottom"][@{flex}~="box:justify"] > *:last-child //两端最后一个子元素
  {
    height: auto;
    flex-grow: 0;
    flex-shrink: 0;
    //flex-basis: auto;
    //flex: 0 0 auto;
  }

  //子元素伸缩比例循环
  .flex-box(10);
  .flex-box(@n, @i: 0) when (@i =< @n) {
    [@{flex-box}="@{i}"] {
      flex-grow: @i;
      flex-shrink: @i;
      //flex-basis: auto;
      //flex: @i @i auto;
    }
    .flex-box(@n, (@i + 1));
  }

}