import * as React from 'react'
import { Col, Row, Form, Input, Modal, Button, Icon, message, Checkbox } from 'antd'
import { FormComponentProps } from 'antd/lib/form/Form'
import http from '../../../common/api'
import { TableContent } from './content/table'
import { EditableCell } from './modal/editable'
import { Params } from './modal/parmsExp/paramExpression'
import { AlarmTiming } from './modal/alarm/alarmTiming'
import './configure.scss'
const FormItem = Form.Item

interface PropsConfigure extends FormComponentProps {
    visible?: boolean;
    onCreate?: () => void;
    onCancel?: () => void;
    onInfo?: any;
    checked?: boolean;
    onSid?: any;
    propData?: any
    saveBtnFunc?: (props: any) => void;
    dataSource?: any;
    block?: boolean;
    onfetch: (pageIndex: number) => void
}

export class TCustormForm extends React.Component<PropsConfigure, any> {
    private formRef: any = null;
    private numberVal: any = null;
    private delCondid: any = [];
    private resultconcat: any = [];
    constructor(props: PropsConfigure) {
        super(props)
        this.state = {
            show: props.block,
            data: {},
            edit: false,
            confirmLoading: false,
            isUpdate: false,
            dataSource: [],
            params: false,
            alarm: false,
            leftDev: [],
            parameter: '',
            check: '',
            alarmResult: '',
            del: false // 默认告警设备状态为初始获取的 onInfo.condition_info，当删除操作后，del为true，这样避免为空跳回初始值
        };
    }
    // 转换告警信息
    getWgrade = (record) => {
        const children = [];
        if (Number(record.wgrade) === 0) {
            children.push('正常')
        } else if (Number(record.wgrade) === 1) {
            children.push('一般告警')
        } else if (Number(record.wgrade) === 2) {
            children.push('重要告警')
        } else if (Number(record.wgrade) === 3) {
            children.push('紧急告警')
        }
        return children;
    }
    // 转换设备状态
    getEstate = (record) => {
        const children = [];
        if (Number(record.estate) === 0) {
            children.push('不工作')
        } else if (Number(record.estate) === 1) {
            children.push('工作')
        } else if (Number(record.estate) === 2) {
            children.push('备用')
        }
        return children;
    }

    // 勾选告警可屏蔽，屏蔽告警出现
    onchange = (e) => {
        this.setState({
            show: e.target.checked,
        });
    }
    // 编辑
    editDataFunc = (record) => {
        this.formRef.getForm().setFieldsValue({
            estate: this.getEstate(record),
            wgrade: this.getWgrade(record),
            sascii: record.sascii,
            svalue: record.svalue,
            wdelay: record.wdelay,
            winfo: record.winfo,
            cid: record.condid
        })

        this.resultconcat = this.state.del ? this.resultconcat : this.props.onInfo.condition_info
        this.setState({ edit: true, isUpdate: true })
    }
    // 编辑取消
    editCancel = () => {
        this.setState({ edit: false });
    }
    // 编辑保存
    sureBtnFunc = () => {
        const form = this.formRef.getForm();
        const { onSid } = this.props;
        form.validateFields((err, values) => {
            if (err) {
                return;
            }
            this.setState({ confirmLoading: true });
            let Rdata = {
                mtd: 'ucond',
                sid: Number(onSid.toString()),
                cid: this.state.isUpdate ? values.cid : 0,
                estate: this.selectNo(values.estate),
                wgrade: this.selectNo(values.wgrade),
                sascii: values.sascii,
                svalue: values.svalue,
                wdelay: values.wdelay,
                winfo: values.winfo,
            }
            http.postReq(
                '/ztmanage/a/zt/configpara',
                Rdata,
                (data) => {
                    message.success('数据添加成功!')
                    form.resetFields();
                    this.setState({ edit: false, confirmLoading: false }, () => {
                        let newdata = {
                            estate: this.selectNo(values.estate),
                            wgrade: this.selectNo(values.wgrade),
                            sascii: values.sascii,
                            svalue: values.svalue,
                            wdelay: values.wdelay,
                            condid: data.ucond.condid.toString(),
                            winfo: values.winfo,
                            stationid: onSid.toString()
                        };
                        // 如果是编辑状态，去除当前编辑的condid，后添加返回含有新的condid的newdata
                        if (this.state.isUpdate) {
                            this.resultconcat = this.resultconcat.filter((item) => {

                                return item.condid !== values.cid
                            })

                        }

                        // 去除已经删掉的condid
                        this.resultconcat.push(newdata)
                        this.setState({
                            dataSource: this.resultconcat,
                            del: true
                        })
                    });
                }
            )
        });
    }
    //  判断编辑的下拉框是否改变value，改变了要转换
    selectNo = (arr) => {
        // console.log(typeof arr)
        if (typeof arr === 'object') {
            let val = arr.toString();
            if (val === '正常' || val === '不工作') {
                this.numberVal = 0
            } else if (val === '一般告警' || val === '工作') {
                this.numberVal = 1
            } else if (val === '重要告警' || val === '备用') {
                this.numberVal = 2
            } else if (val === '紧急告警') {
                this.numberVal = 3
            }
        } else {
            this.numberVal = arr
        }
        return Number(this.numberVal)
    }
    // 编辑删除
    onDelete = (condid) => {
        this.resultconcat = this.state.del ? this.resultconcat : this.props.onInfo.condition_info
        this.setState({ del: true })
        this.delCondid.push(condid)

        this.resultconcat = this.resultconcat.filter(
            (item) => {
                console.log(this.delCondid.indexOf(item.condid))
                return this.delCondid.indexOf(item.condid) < 0
            }
        )

        this.setState({ dataSource: this.resultconcat });
    }
    // config的模态框的的取消
    delCancel = () => {
        this.props.onCancel();
        this.delCondid = [];
        this.props.form.resetFields()
        this.setState({
            data: {},
            edit: false,
            confirmLoading: false,
            dataSource: [],
            parameter: '',
            alarmResult: '',
            del: false
        })
    }
    // 新增条件
    addDataFunc = () => {
        this.formRef.getForm().resetFields()
        this.resultconcat = this.state.del ? this.resultconcat : this.props.onInfo.condition_info
        this.setState({ dataSource: this.resultconcat, edit: true, isUpdate: false, del: true })
    }
    // 参数表达式
    paramExp = () => {
        const { onSid } = this.props
        http.getReq(
            '/ztmanage/a/zt/configpara',
            { sid: Number(onSid.toString()) },
            (data) => {
                const { onInfo } = this.props
                this.setState({
                    loading: false,
                    leftDev: data,
                    parameter: onInfo.parameter,

                });
            }
        )
        this.setState({ params: true });
    }
    // 参数表达式取消
    paramsCancle = () => {
        this.setState({ params: false });
    }

    // 参数表达式保存
    paramSave = (value) => {
        this.setState({
            parameter: value,
            params: false
        })
    }

    // 告警定时屏蔽
    alarmTiming = () => {
        this.setState({ alarm: true }, () => { this.fetch() });
    }
    // 告警定时屏蔽转化数据进制格式
    fetch = () => {
        const { onInfo } = this.props;
        const alarmschedule = this.state.alarmResult ? this.state.alarmResult : onInfo.alarmschedule
        if (alarmschedule.length < 14) {
            alert('告警屏蔽时间表,参数格式不正确!');
            return;
        }
        let week_value_ = parseInt(alarmschedule.substr(12, 2), 16);
        for (let i = 0; i < 8; i++) {
            let checked_ = false;
            if (week_value_ & (1 << i)) {
                checked_ = true;
            }
            let target_name_ = 'week_' + (i + 1);
            let check = document.getElementById(target_name_) as HTMLElement;
            if (check) {
                if (checked_) {
                    let el = check.parentNode as HTMLElement;
                    el.classList.add('ant-checkbox-checked');
                } else {
                    let el = check.parentNode as HTMLElement;
                    el.classList.remove('ant-checkbox-checked');
                }
            }
        }
        for (let i = 0; i < 6; i++) {
            let int_value_ = parseInt(alarmschedule.substr(i * 2, 2), 16);
            for (let j = 0; j < 8; j++) {
                let checked_ = false;
                if (int_value_ & (1 << j)) {
                    checked_ = true;
                }
                let target_name_ = 'date_' + (i * 8 + j + 1);
                let check = document.getElementById(target_name_) as HTMLElement;
                if (check) {
                    if (checked_) {
                        let el = check.parentNode as HTMLElement;
                        el.classList.add('ant-checkbox-checked');
                    } else {
                        let el = check.parentNode as HTMLElement;
                        el.classList.remove('ant-checkbox-checked');
                    }
                }
            }
        }
    }
    // 告警表达式取消
    alarmCancle = () => {
        this.setState({ alarm: false });
    }

    //  计算告警时间进制运位算
    _IntToHex = function (value: any, length: any) {
        var temp_ = new Array(length).join('0');
        var hex_ = Number(value).toString(16);
        hex_ = temp_.substr(0, length - hex_.length) + hex_;
        return hex_.toUpperCase();
    };
    // 告警表达式保存
    alarmSave = () => {
        this.setState({ alarm: false });
        let alarmResult = ''
        let int_value_ = 0;
        for (var i = 0; i < 6; i++) {
            int_value_ = 0;
            for (var j = 0; j < 8; j++) {
                let target_name_ = 'date_' + (i * 8 + j + 1);
                let check = document.getElementById(target_name_) as HTMLElement;
                if (check) {
                    let ParentChecked = check.parentNode as HTMLElement;
                    if (ParentChecked.getAttribute('class')) {  // 存在class属性
                        // 方式1
                        if (ParentChecked.getAttribute('class').indexOf('ant-checkbox-checked') > -1) {
                            int_value_ += Math.pow(2, j);
                        }
                    }
                }
            }
            alarmResult += this._IntToHex(int_value_, 2);
        }
        int_value_ = 0;
        for (let k = 0; k < 8; k++) {
            let target_name_ = 'week_' + (k + 1);
            let check = document.getElementById(target_name_) as HTMLElement;
            if (check) {
                let ParentChecked = check.parentNode as HTMLElement;
                if (ParentChecked.getAttribute('class')) {  // 存在class属性
                    // 方式2
                    if (ParentChecked.className.indexOf('ant-checkbox-checked') > -1) {
                        int_value_ += Math.pow(2, k);
                    }
                }
            }
        }
        alarmResult += this._IntToHex(int_value_, 2);
        this.setState({ alarmResult: alarmResult })
    }

    getAlarm = () => {
        let property = false
        this.props.form.validateFields((err, values) => {
            property = values.property_0
        })
        return property
    }

    handleCreate = () => {
        const { onInfo } = this.props
        this.props.form.validateFields((err, values) => {
            if (err) {
                return;
            }
            let val = this._GetPropertyValue(onInfo)

            let condidAll = '/';

            //  条件没变，就直接原路返回提交，增删改查了就用dataSource
            if (this.state.del) {
                this.state.dataSource.map((item, index) => {
                    if (index + 1 === this.state.dataSource.length) {
                        condidAll += item.condid
                        condidAll += '/'
                    } else {
                        condidAll += item.condid + ','
                    }
                })
            } else {
                condidAll = onInfo.condid

            }

            let Rdata = {
                signalname: values.signalnameconfig,
                unitname: values.unitnameconfig,
                showprecision: values.showprecision,
                parameter: values.parameter,
                alarmschedule: values.alarmschedule,
                sid: Number(onInfo.stationid.toString()),
                eid: Number(onInfo.equipmentid.toString()),
                cid: Number(onInfo.signalid.toString()),
                property: val,
                condid: condidAll
            }
            http.postReq(
                '/ztmanage/a/zt/config?mtd=usig',
                Rdata,
                (res) => {
                    console.log(res)
                    this.props.onfetch(1)
                }
            )
            this.props.onCancel();
            this.props.form.resetFields();
        });
    }

    // 表达式位运算转化数值给后台
    _GetPropertyValue = (values) => {

        let property_value_ = values.property;

        for (let i = 0; i < 10; i++) {
            var property_id_ = 'property_' + i;
            let target_name = document.getElementById(property_id_) as HTMLInputElement;

            if (target_name) {
                let ParentChecked = target_name.parentNode as HTMLElement;
                if (ParentChecked.getAttribute('class')) {  // 存在class属性
                    // 方式1
                    if (ParentChecked.getAttribute('class').indexOf('ant-checkbox-checked') > -1) {
                        let bit_value = 1 << i;
                        property_value_ |= bit_value;
                    } else {
                        let bit_value = (0xFFFF ^ (1 << i));
                        property_value_ &= bit_value;
                    }
                }
            }
        }
        return property_value_;
    }

    render() {
        const { visible, form, onInfo } = this.props;
        const { getFieldDecorator } = form;
        const { show, alarmResult, del, dataSource } = this.state;
        const disabled = true;
        return (
            <Modal
                visible={visible}
                title={onInfo.equipmentname + '——动态配置'}
                onCancel={this.delCancel}
                onOk={this.handleCreate}
                okText="提交"
                cancelText="取消"
                width={1000}
                maskClosable={false}
            >
                <Form className="ant-advanced-search-form" >
                    <Row gutter={24}>
                        <Col span={12}>
                            <FormItem
                                label="设备"
                            >
                                {getFieldDecorator('equipmentnameconfig', {
                                    initialValue: onInfo['equipmentname'],
                                })(
                                    <Input disabled={disabled} />
                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="信号"
                            >
                                {getFieldDecorator('signalnameconfig', {
                                    initialValue: onInfo['signalname'],
                                })(
                                    <Input />
                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="单位"
                            >
                                {getFieldDecorator('unitnameconfig', {
                                    initialValue: onInfo['unitname'],
                                })(
                                    <Input />
                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="格式"
                            >

                                {getFieldDecorator('showprecision', {
                                    initialValue: onInfo['showprecision'],
                                })(
                                    <Input />
                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="控制数据上限"
                            >

                                {getFieldDecorator('controlhi', {
                                    initialValue: onInfo['controlhi'],
                                })(
                                    <Input disabled={disabled} />
                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="控制数据下限"
                            >

                                {getFieldDecorator('controllo', {
                                    initialValue: onInfo['controllo'],
                                })(
                                    <Input disabled={disabled} />
                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="参数表达式"
                                className="alart"
                            >

                                {getFieldDecorator('parameter', {
                                    initialValue: this.state.parameter ? this.state.parameter : onInfo['parameter'],
                                })(
                                    <Input
                                        readOnly={true}
                                        addonAfter={<Icon type="edit" onClick={this.paramExp} />}
                                    />

                                )}
                            </FormItem>
                        </Col>
                        <Col span={12}>
                            <FormItem
                                label="告警定时屏蔽"
                                className="alart"
                            >
                                {getFieldDecorator(
                                    'alarmschedule', {
                                        initialValue: alarmResult ? alarmResult : onInfo['alarmschedule'],
                                    })(
                                        <Input
                                            readOnly={true}
                                            addonAfter={
                                                <Icon
                                                    type="edit"
                                                    onClick={this.alarmTiming}
                                                />}
                                        />
                                    )}
                            </FormItem>
                        </Col>
                    </Row>
                    <Row>
                        <Col span={4}>
                            <FormItem>

                                {getFieldDecorator('property_0', {
                                })(
                                    <Checkbox
                                        onChange={this.onchange}
                                    >
                                        告警可屏蔽
                                    </Checkbox>
                                )}
                            </FormItem>
                        </Col>
                        <Col
                            span={4}
                            style={{ display: show || this.getAlarm() ? 'block' : 'none' }}
                            id="property-off-grp"
                        >
                            <FormItem>

                                {getFieldDecorator('property_1', {
                                })(
                                    <Checkbox>屏蔽告警</Checkbox>
                                )}
                            </FormItem>
                        </Col>
                        <Col span={4}>
                            <FormItem>

                                {getFieldDecorator('property_2', {
                                })(
                                    <Checkbox>重要信号</Checkbox>
                                )}
                            </FormItem>
                        </Col>
                        <Col span={4}>
                            <FormItem>

                                {getFieldDecorator('property_5', {
                                })(
                                    <Checkbox>可视信号</Checkbox>
                                )}
                            </FormItem>
                        </Col>
                        <Col span={4}>
                            <FormItem>

                                {getFieldDecorator('property_9', {
                                })(
                                    <Checkbox>抄表信号</Checkbox>
                                )}
                            </FormItem>
                        </Col>
                    </Row>
                    <Row>
                        <Button onClick={this.addDataFunc} type="primary"><Icon type="plus" />新增条件</Button>

                        <TableContent
                            onData={del ? dataSource : onInfo.condition_info}
                            edit={this.editDataFunc}
                            onDelete={this.onDelete}
                        />
                    </Row>
                    <EditableCell
                        ref={(node) => {
                            this.formRef = node
                        }}
                        isUpdate={this.state.isUpdate}
                        hideModel={this.editCancel}
                        confirmLoading={this.state.confirmLoading}
                        sureBtnFunc={this.sureBtnFunc}
                        edit={this.state.edit}
                    />
                    <Params
                        onParams={this.state.params}
                        paramsCancle={this.paramsCancle}
                        paramSave={this.paramSave}
                        leftDev={this.state.leftDev}
                        onValue={this.state.parameter}
                    />
                    <AlarmTiming
                        onInfo={this.props.onInfo}
                        onAlarm={this.state.alarm}
                        alarmCancle={this.alarmCancle}
                        alarmSave={this.alarmSave}
                    />
                </Form>
            </Modal>
        )
    }
}
export const Configure = Form.create<PropsConfigure>()(TCustormForm);
